"""
modules/core/model_manager/api_schemas.py
Pydantic schemas for API request/response validation.

Generated by Module Scaffolder V2
"""

from typing import List, Dict, Any, Optional, Union
from pydantic import BaseModel, Field
from datetime import datetime

# Request Schemas


class ReleaseModelRequest(BaseModel):
    """Request schema for releasing model reference."""
    model_id: str = Field(..., description="Model ID to release")

# Response Schemas

class ModelInfo(BaseModel):
    """Model information schema."""
    model_id: str = Field(..., description="Model identifier")
    model_type: str = Field(..., description="Type of model (embedding, text2text, etc.)")
    name: str = Field(..., description="Model name/path")
    dimension: Optional[int] = Field(None, description="Embedding dimension (for embedding models)")
    device: str = Field(..., description="Device the model is running on")
    references: int = Field(..., description="Current reference count")
    last_accessed: float = Field(..., description="Last access timestamp")
    created_at: float = Field(..., description="Model creation timestamp")


class ModelStatusResponse(BaseModel):
    """Response schema for model status."""
    loaded_models: int = Field(..., description="Number of loaded models")
    cache_size: int = Field(..., description="Size of embedding cache")
    models: Dict[str, ModelInfo] = Field(..., description="Detailed model information")

class ServiceStatusResponse(BaseModel):
    """Response schema for service status."""
    module_id: str = Field(..., description="Module identifier")
    initialized: bool = Field(..., description="Whether service is initialized")
    config_loaded: bool = Field(..., description="Whether configuration is loaded")
    loaded_models: Optional[int] = Field(None, description="Number of loaded models")
    cache_size: Optional[int] = Field(None, description="Size of embedding cache")

class ModelReleaseResponse(BaseModel):
    """Response schema for model release."""
    model_id: str = Field(..., description="Model ID that was released")
    remaining_references: int = Field(..., description="Remaining reference count")

# Error Schemas

class ErrorDetail(BaseModel):
    """Error detail schema."""
    error_type: Optional[str] = Field(None, description="Type of error")
    error: Optional[str] = Field(None, description="Error message")
    model_id: Optional[str] = Field(None, description="Model ID related to error")

class ErrorResponse(BaseModel):
    """Error response schema."""
    status: str = Field(default="error", description="Response status")
    code: str = Field(..., description="Error code")
    message: str = Field(..., description="Human-readable error message")
    details: Optional[ErrorDetail] = Field(None, description="Additional error details")

# Success Schemas

class SuccessResponse(BaseModel):
    """Generic success response schema."""
    status: str = Field(default="success", description="Response status")
    message: str = Field(..., description="Success message")
    data: Optional[Dict[str, Any]] = Field(None, description="Response data")